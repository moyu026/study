import torch

# 1. view/reshape  打平数据维度后会丢失原来数据维度
a=torch.rand(4,1,28,28) # 将每张图片后面的维度即高和宽打平成一维向量
b=a.view(4,1*28*28)
'''tensor([[0.2583, 0.7836, 0.2648,  ..., 0.2759, 0.5328, 0.2795],
        [0.5204, 0.5990, 0.8594,  ..., 0.5267, 0.4734, 0.1662],
        [0.9630, 0.8332, 0.6845,  ..., 0.0077, 0.0337, 0.8899],
        [0.9079, 0.1930, 0.7714,  ..., 0.9782, 0.6682, 0.4570]])'''

b=a.view(4*28,28) #  将4张图片的行合并在一起
'''tensor([[0.9081, 0.4293, 0.9211,  ..., 0.5722, 0.2731, 0.6074],
        [0.6924, 0.4195, 0.1907,  ..., 0.1552, 0.2441, 0.6938],
        [0.2053, 0.5757, 0.3361,  ..., 0.8143, 0.9960, 0.3345],
        ...,
        [0.4311, 0.7531, 0.1576,  ..., 0.4415, 0.3363, 0.6169],
        [0.3910, 0.3622, 0.3744,  ..., 0.3640, 0.6336, 0.1308],
        [0.4889, 0.4765, 0.4011,  ..., 0.8594, 0.1750, 0.7238]])'''


#  2.1  unsqueeze
c=a.unsqueeze(0).shape  # 在第0个维度增加一个维度
'''torch.Size([1, 4, 1, 28, 28])'''

c=a.unsqueeze(-1).shape # 在最后一个维度处增加一个维度
'''torch.Size([4, 1, 28, 28, 1])'''

c=a.unsqueeze(-4).shape # 在-4维度处增加一个维度
'''torch.Size([4, 1, 1, 28, 28])'''
#### 例子1
a=torch.tensor([1.2,2.3])
'''tensor([1.2000, 2.3000])'''
c=a.unsqueeze(-1) # 由维度[2]变成维度[2,1]
'''tensor([[1.2000],
        [2.3000]])'''

c=a.unsqueeze(0)  # 由维度[2]变成维度[1,2]
'''tensor([[1.2000, 2.3000]])'''

##### 例子2: b向量加f向量
b=torch.rand(32)
f=torch.rand(4,32,14,14)
b=b.unsqueeze(1).unsqueeze(2).unsqueeze(0)
c=b.shape
'''torch.Size([1, 32, 1, 1])'''


#  2.2  squeeze
c1=b.shape
'''torch.Size([1, 32, 1, 1])'''

c2=b.squeeze().shape # 去掉维度为1的维度
'''torch.Size([32])'''

c3=b.squeeze(0).shape  # 去掉第0个维度
'''torch.Size([32, 1, 1])'''

c3=b.squeeze(-1).shape  # 去掉最后一个维度
'''torch.Size([1, 32, 1])'''



#  3.1  expand 拓展维度但不复制数据
a=torch.rand(4,32,14,14)
d=b.shape
'''torch.Size([1, 32, 1, 1])'''
d1=b.expand(4,32,14,14).shape # 只能拓展向量b中维度数为1的维度，不能拓展大于1的维度
'''torch.Size([4, 32, 14, 14])'''

d2=b.expand(-1,32,-1,-1).shape  #  -1表示原来的维度数不变
'''torch.Size([1, 32, 1, 1])'''


#  3.2  repeat 拓展维度且复制数据 (不建议使用)
f1=b.repeat(4,1,1,1).shape # 第一个维度复制4次，其余维度不变
'''torch.Size([4, 32, 1, 1])'''

f2=b.repeat(4,1,1,32).shape # 第一个维度复制4次，最后一个维度复制32次，其余维度不变
'''torch.Size([4, 32, 1, 32])'''



#  矩阵转置，只适用于2维矩阵，高维度不能用
a=torch.rand(3,4)
'''tensor([[0.1343, 0.1480, 0.6350, 0.8625],
        [0.5635, 0.5237, 0.0114, 0.9377],
        [0.2027, 0.5577, 0.3957, 0.3935]])'''
e=a.t()  # 转置
'''tensor([[0.6766, 0.4856, 0.5189],
        [0.5462, 0.5335, 0.4350],
        [0.1418, 0.6162, 0.3164],
        [0.6842, 0.8615, 0.0988]])'''



#  维度交换
a=torch.rand(4,3,28,32)
b=a.permute(0,2,3,1).shape  # [b,c,h,w]->[b,h,w,c],0123表示向量a中维度的位置
'''torch.Size([4, 28, 32, 3])'''
print(b)
